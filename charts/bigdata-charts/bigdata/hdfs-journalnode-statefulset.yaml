# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-k8s-journalnode
  labels:
    app: hdfs-k8s-journalnode
    app-role: big-data
  annotations:
    # TODO: Deprecated. Replace tolerate-unready-endpoints with
    # v1.Service.PublishNotReadyAddresses.
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - port: 8485
    name: jn
  - port: 8480
    name: http
  clusterIP: None
  selector:
    app: hdfs-k8s-journalnode
    #release: {{ .Release.Name }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: hdfs-k8s-journalnode
  labels:
    app: hdfs-k8s-journalnode
    app-role: big-data
spec:
  selector:
    matchLabels:
      app: hdfs-k8s-journalnode
      app-role: big-data
  minAvailable: 2 | add1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hdfs-k8s-journalnode
  labels:
    app: hdfs-k8s-journalnode
    app-role: big-data
spec:
  serviceName: hdfs-k8s-journalnode
  replicas: 2
  template:
    metadata:
      labels:
        app: hdfs-k8s-journalnode
        app-role: big-data
      #annotations:
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - hdfs-k8s-journalnode
                  #- key: "release"
                  #  operator: In
                  #  values:
                  #    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      #nodeSelector:
      #tolerations:
      containers:
        - name: hdfs-journalnode
          image: uhopper/hadoop-namenode:2.7.2
          env:
            - name: HADOOP_CUSTOM_CONF_DIR
              value: /etc/hadoop-custom-conf
          command: ["/entrypoint.sh"]
          args: ["/opt/hadoop-2.7.2/bin/hdfs", "--config", "/etc/hadoop", "journalnode"]
          ports:
          - containerPort: 8485
            name: jn
          - containerPort: 8480
            name: http
          volumeMounts:
            # Mount a subpath of the volume so that the journal subdir would be
            # a brand new empty dir. This way, we won't get affected by
            # existing files in the volume top dir.
            - name: editdir
              mountPath: /hadoop/dfs/journal
              subPath: journal
            - name: editdir
              mountPath: /hadoop/dfs/name
              subPath: name
            - name: hdfs-config
              mountPath: /etc/hadoop-custom-conf
              readOnly: true
           #{{- if .Values.global.kerberosEnabled }}
           # - name: kerberos-config
           #   mountPath: /etc/krb5.conf
           #   subPath: {{ .Values.global.kerberosConfigFileName }}
           #   readOnly: true
           # - name: kerberos-keytab-copy
           #   mountPath: /etc/security/
           #   readOnly: true
     #{{- if .Values.global.kerberosEnabled }}
     # initContainers:
     #   - name: copy-kerberos-keytab
     #     image: busybox:1.27.1
     #     command: ['sh', '-c']
     #     args:
     #       - cp /kerberos-keytabs/${MY_KERBEROS_NAME}*.keytab /kerberos-keytab-copy/hdfs.keytab
     #     env:
     #       - name: MY_KERBEROS_NAME
     #         valueFrom:
     #           fieldRef:
     #             fieldPath: metadata.name
     #     volumeMounts:
     #       - name: kerberos-keytabs
     #         mountPath: /kerberos-keytabs
     #       - name: kerberos-keytab-copy
     #         mountPath: /kerberos-keytab-copy
     # {{- end }}
      restartPolicy: Always
      volumes:
        - name: hdfs-config
          configMap:
            name: hdfs-k8s-config
        #{{- if .Values.global.kerberosEnabled }}
        #- name: kerberos-config
        #  configMap:
        #    name: {{ template "krb5-configmap" . }}
        #- name: kerberos-keytabs
        #  secret:
        #    secretName: {{ template "krb5-keytabs-secret" . }}
        #- name: kerberos-keytab-copy
        #  emptyDir: {}
      #{{- if .Values.global.podSecurityContext.enabled }}
      #securityContext:
      #  runAsUser: {{ .Values.global.podSecurityContext.runAsUser }}
      #  fsGroup: {{ .Values.global.podSecurityContext.fsGroup }}
      #{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: editdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: local-path
        #selector:
